namespace ca.mcgill.ecse223.tileo.controller;
class PlayController {
mode {
Ready {
startGame() / {doStartGame();} -> Roll;
      setState(state gameState) [isInGameState(selectedGame)] -> Roll;
      setState(state gameState) [isInGameWonState(selectedGame)] -> GameWon;
      setState(state gameState) [isInGameRemoveConnectionActionCardState(selectedGame)] -> GameRemoveConnectionActionCard;
      setState(state gameState) [isInGameTeleportActionCardState(selectedGame)] -> GameTeleportActionCard;
      setState(state gameState) [isInGameRollDieActionCardState(selectedGame)] -> GameRollDieActionCard;
      setState(state gameState) [isInGameLoseTurnActionCardState(selectedGame)] -> GameLoseTurnActionCard;
      setState(state gameState) [isInGameConnectTilesActionCardState(selectedGame)] -> GameConnectTilesActionCard;
}
Roll {
rollDie() / {
possibleMoves = doRollDie();
} -> Move;
}
Move {
land(Tile tile) [isNormalTile(tile)] / {
doLandTile(tile);
} -> Roll;
land(Tile tile) [isWinTile(tile)] / {
doLandTile(tile);
} -> Won;
land(Tile tile) [isActionTile(tile)] / {
doLandTile(tile);
} -> ActionCard;
}
  
ActionCard {
playRollDieActionCard() [isRollDieActionCard()] / {
possibleMoves = doPlayRollDieActionCard();
} -> Roll;
playAddConnectionActionCard(Tile tile1, Tile tile2) [isConnectTilesActionCard()] / {
doPlayAddConnectionActionCard(tile1, tile2);
} -> Roll;
playRemoveConnectionActionCard(Connection c)
[isRemoveConnectionActionCard()] / {
doPlayRemoveConnectionActionCard(c);
} -> Roll;
playTeleportActionCard(Tile tile) [isTeleportAndNormalTile(tile)] / {
doPlayTeleportActionCard(tile);
} -> Roll;
playTeleportActionCard(Tile tile) [isTeleportAndWinTile(tile)] / {
doPlayTeleportActionCard(tile);
} -> Won;
playTeleportActionCard(Tile tile) [isTeleportAndActionTile(tile)] / {
doPlayTeleportActionCard(tile);
} -> ActionCard;
playLoseTurnActionCard()[isLoseTurnActionCard()] / {
doPlayLoseTurnActionCard();
} -> Roll;
}
}
  
  Private void doStartGame() throws Exception {
		Deck deck = game.getDeck();
		List<Player> allPlayers = game.getPlayers();

		if (!game.hasWinTile()) {
			throw new InvalidInputException("No win tile in the game");
		}
		for (int k = 0; k < game.numberOfPlayers(); k++) {
			Player player = allPlayers.get(k);
			if (!player.hasStartingTile()) {
				throw new InvalidInputException("One or more players do not have a starting position.");
			}
		}

		TileOApplication.getTileO().setCurrentGame(game);

		List<Tile> tiles = game.getTiles();
		for (int i = 0; i < tiles.size(); i++) {
			Tile checkTile = tiles.get(i);
			checkTile.setHasBeenVisited(false);
		}
		for (int j = 0; j < game.numberOfPlayers(); j++) {
			Player thisPlayer = allPlayers.get(j);
			Tile startingTile = thisPlayer.getStartingTile();
			thisPlayer.setCurrentTile(startingTile);
			startingTile.setHasBeenVisited(true);
		}
		game.setCurrentPlayer(allPlayers.get(0));
		
		deck.shuffle();
	}

  private boolean isInGameState(Game selectedGame){
    return (selectedGame.getModeFullName().equals(“GAME”));
  }

  private boolean isInWonState(Game selectedGame){
    return (selectedGame.getModeFullName().equals(“GAME_WON”));
  }

  private boolean isInGameRemoveConnectionActionCardState(Game selectedGame){
    return (selectedGame.getModeFullName().equals(“GAME_REMOVECONNECTIONACTIONCARD”));
  }

  private boolean isInGameTeleportActionCardState(Game selectedGame){
    return (selectedGame.getModeFullName().equals(“GAME_TELEPORTACTIONCARD”));
  }

  private boolean isInGameRollDieActionCardState(Game selectedGame){
    return (selectedGame.getModeFullName().equals(“GAME_ROLLDIEACTIONCARD”));
  }

  private boolean isInGameLoseTurnActionCardState(Game selectedGame){
    return (selectedGame.getModeFullName().equals(“GAME_LOSETURNACTIONCARD”));
  }

  private boolean isInGameConnectActionCardState(Game selectedGame){
    return (selectedGame.getModeFullName().equals(“GAME_CONNECTTILESACTIONCARD”));
  }

  private boolean isNormalTile(Tile tile){
    return (tile instanceof NormalTile);
  }

  private boolean isActionTile(Tile tile){
    return (tile instanceof ActionTile);
  }

  private boolean isWinTile(Tile tile){
    return (tile instanceof WinTile);
  }
  
  private boolean isRollDieActionCard(){
    ActionCard currentCard = getTopCard();
    return currentCard instanceof RollDieActionCard;
  }
  
  private boolean isConnectTilesActionCard(){
    ActionCard currentCard = getTopCard();
    return currentCard instanceof ConnectTilesActionCard;
  }
  
  private boolean isRemoveConnectionActionCard(){
    ActionCard currentCard = getTopCard();
    return currentCard instanceof RemoveConnectionActionCard;
  }
  
  private boolean isLoseTurnActionCard(){
    ActionCard currentCard = getTopCard();
    return currentCard instanceof LoseTurnActionCard;
  }
  
  private boolean isTeleportAndWinTile(Tile tile){
    ActionCard currentCard = getTopCard();
    return (currentCard instanceof TeleportActionCard && tile instanceof WinTile);
  }
  
  private boolean isTeleportAndNormalTile(Tile tile){
    ActionCard currentCard = getTopCard();
    return (currentCard instanceof TeleportActionCard && tile instanceof NormalTile);
  }
  
  private boolean isTeleportAndActionTile(Tile tile){
    ActionCard currentCard = getTopCard();
    return (currentCard instanceof TeleportActionCard && tile instanceof ActionTile);
  }
  
  public ActionCard getTopCard() throws Exception {
		Deck deck = game.getDeck();
		ActionCard actionCard = deck.getCurrentCard();

		int index = deck.indexOfCard(actionCard);
		// Return to the beginning of the deck when the counter reaches the end
		// of the deck
		ActionCard nextTopCard;
		int numOfCards = deck.numberOfCards();

		if (index + 1 < numOfCards) {
			nextTopCard = deck.getCard(index + 1);
		} else {
			deck.shuffle();
			nextTopCard = deck.getCard(0);
		}

		deck.setCurrentCard(nextTopCard);

		return nextTopCard;
	}
  
  public List<Tile> doRollDie() {
		int rolledNumber = game.rollDie();
		
		new PopUpManager(ui).rollDie(rolledNumber);
		
		Player currentPlayer = game.getCurrentPlayer();
		List<Tile> possibleMoves = currentPlayer.getPossibleMoves(rolledNumber);
		
		return possibleMoves;
	}
  
  private void doLand(Tile tile) throws InvalidInputException {
		if (game.indexOfTile(tile) == -1)
			throw new InvalidInputException("This tile does not exist in the current game.");
		tile.land();
	}
  
  
  
  private void doPlayAddConnectionActionCard(Tile tile1, Tile tile2) throws InvalidInputException {

		game.placeConnection(tile1, tile2);
		
		if(game.getCurrentConnectionPieces() > 0)
			game.setCurrentConnectionPieces(game.getCurrentConnectionPieces()-1);
	}

  private void doPlayTeleportActionCard(Tile tile) throws InvalidInputException {
		TeleportActionCard playedCard = (TeleportActionCard) game.getDeck().getCurrentCard();

		// Play the card
		playedCard.play(tile);
	}
  
  private void doPlayRemoveConnectionActionCard(Connection connection) throws InvalidInputException {
		List<Connection> conns = tile1.getConnections();

		for (Connection conn : conns) {
			List<Tile> tiles = conn.getTiles();
			{
				for (Tile tile : tiles) {
					if (tile == tile2) {
						game.removeConnection(conn);
						
						if(game.getCurrentConnectionPieces() < 32)
							game.setCurrentConnectionPieces(game.getCurrentConnectionPieces()+1);
						
						return;
					}
				}
			}
		}
	}
  
  private List<Tile> doPlayRollDieActionCard() throws InvalidInputException {
		// Roll The Die method returns possible tiles for player to move to.
		List<Tile> tiles = rollDie();
		
		return tiles;
	}

	public void nextTurn() {
		int indexOfCurrentPlayer = game.indexOfPlayer(game.getCurrentPlayer());

		// If current player is last player, make the first player the current
		// player.
		if (indexOfCurrentPlayer == (game.numberOfPlayers() - 1)) {
			game.setCurrentPlayer(game.getPlayer(0));
		}
		// Set next player as current player.
		else {
			game.setCurrentPlayer(game.getPlayer(indexOfCurrentPlayer + 1));
		}
		
		ui.update();
	}
  
  private Game game;
  private TileOPlayUI ui;
  
  
}
